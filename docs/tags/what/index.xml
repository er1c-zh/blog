<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>what on blog</title>
    <link>https://blog.er1c.dev/tags/what/</link>
    <description>Recent content in what on blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 28 Jun 2023 19:50:50 +0800</lastBuildDate><atom:link href="https://blog.er1c.dev/tags/what/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>OSI7层模型</title>
      <link>https://blog.er1c.dev/post/network/osi/</link>
      <pubDate>Wed, 28 Jun 2023 19:50:50 +0800</pubDate>
      
      <guid>https://blog.er1c.dev/post/network/osi/</guid>
      <description>&lt;p&gt;&lt;strong&gt;O&lt;/strong&gt;pen &lt;strong&gt;S&lt;/strong&gt;ystem &lt;strong&gt;I&lt;/strong&gt;nterconnection model，
开放式系统互联模型是国际标准化组织为
“协调系统互联类型标准研发提供一个公共的基础”而提出的理论模型。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gossip Protocol</title>
      <link>https://blog.er1c.dev/post/distributed/gossip-protocol/</link>
      <pubDate>Tue, 20 Jun 2023 11:38:35 +0800</pubDate>
      
      <guid>https://blog.er1c.dev/post/distributed/gossip-protocol/</guid>
      <description>&lt;p&gt;Gossip 协议是一种病毒式传播的P2P协议。
一些分布式系统用 p2p gossip 来保证数据分发到系统中的所有成员。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rust宏</title>
      <link>https://blog.er1c.dev/post/language/rust/marco/</link>
      <pubDate>Fri, 19 May 2023 17:14:28 +0800</pubDate>
      
      <guid>https://blog.er1c.dev/post/language/rust/marco/</guid>
      <description>&lt;p&gt;rust有&lt;code&gt;declarative&lt;/code&gt;宏和&lt;code&gt;procedural&lt;/code&gt;宏。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>eBPF总览</title>
      <link>https://blog.er1c.dev/post/linux/ebpf-intro/</link>
      <pubDate>Thu, 30 Mar 2023 19:01:52 +0800</pubDate>
      
      <guid>https://blog.er1c.dev/post/linux/ebpf-intro/</guid>
      <description>&lt;p&gt;eBPF是一种Linux内核提供的，可以在操作系统内核这种需要权限的上下文中执行沙盒程序的技术。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>kafka的实现</title>
      <link>https://blog.er1c.dev/post/mq/kafka/implementation/</link>
      <pubDate>Wed, 26 Oct 2022 07:22:26 +0800</pubDate>
      
      <guid>https://blog.er1c.dev/post/mq/kafka/implementation/</guid>
      <description>&lt;p&gt;kafka的实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>kafka设计</title>
      <link>https://blog.er1c.dev/post/mq/kafka/design/</link>
      <pubDate>Mon, 24 Oct 2022 20:08:12 +0800</pubDate>
      
      <guid>https://blog.er1c.dev/post/mq/kafka/design/</guid>
      <description>&lt;p&gt;kafka的设计思路。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>kafka基本概念</title>
      <link>https://blog.er1c.dev/post/mq/kafka/introduction/</link>
      <pubDate>Thu, 30 Sep 2021 10:39:50 +0800</pubDate>
      
      <guid>https://blog.er1c.dev/post/mq/kafka/introduction/</guid>
      <description>&lt;p&gt;关于kafka的基本概念。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>go channel原理分析</title>
      <link>https://blog.er1c.dev/post/language/go/chan/</link>
      <pubDate>Tue, 11 May 2021 16:30:05 +0800</pubDate>
      
      <guid>https://blog.er1c.dev/post/language/go/chan/</guid>
      <description>&lt;p&gt;从功能出发，分析channel的原理。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>go内存模型与sync包</title>
      <link>https://blog.er1c.dev/post/language/go/memory_model/</link>
      <pubDate>Sat, 01 May 2021 03:06:06 +0800</pubDate>
      
      <guid>https://blog.er1c.dev/post/language/go/memory_model/</guid>
      <description>&lt;p&gt;go中的Happen-before保证与&lt;code&gt;sync&lt;/code&gt;包原理的简单分析。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CRDT简单原理</title>
      <link>https://blog.er1c.dev/post/distributed/crdt/</link>
      <pubDate>Mon, 05 Apr 2021 10:59:43 +0800</pubDate>
      
      <guid>https://blog.er1c.dev/post/distributed/crdt/</guid>
      <description>CRDT (Conflict-free Replicated Data Types) 是一种数据结构，能够在AP的情况下，提供数据的最终一致性。 对于CRDT有两种等价的描述，分别是基于状态描述(state-based</description>
    </item>
    
    <item>
      <title>redis bio是什么与如何实现的</title>
      <link>https://blog.er1c.dev/post/redis/bio/</link>
      <pubDate>Tue, 09 Mar 2021 08:59:52 +0800</pubDate>
      
      <guid>https://blog.er1c.dev/post/redis/bio/</guid>
      <description>&lt;p&gt;在看aof刷盘的代码时，
发现异步刷盘是通过一个叫&lt;code&gt;bio&lt;/code&gt;的组件完成的。
正好研究一下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>学习Websocket</title>
      <link>https://blog.er1c.dev/post/http/websocket/</link>
      <pubDate>Mon, 30 Nov 2020 23:05:21 +0800</pubDate>
      
      <guid>https://blog.er1c.dev/post/http/websocket/</guid>
      <description>之前没有机会用到websocket，也没有认真的了解过， 新的工作里看起来经常会用到，所以简单的了解一下协议的一些细节，以及一些实践。 webs</description>
    </item>
    
    <item>
      <title>哈希表的实现</title>
      <link>https://blog.er1c.dev/post/redis/how_redis_work_hash/</link>
      <pubDate>Mon, 30 Nov 2020 21:52:00 +0800</pubDate>
      
      <guid>https://blog.er1c.dev/post/redis/how_redis_work_hash/</guid>
      <description>&lt;p&gt;redis哈希表相关指令的具体实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>有序集合的实现</title>
      <link>https://blog.er1c.dev/post/redis/how_redis_work_sortedset/</link>
      <pubDate>Sat, 28 Nov 2020 10:57:19 +0800</pubDate>
      
      <guid>https://blog.er1c.dev/post/redis/how_redis_work_sortedset/</guid>
      <description>&lt;p&gt;redis有序集合相关指令的具体实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>集合的实现</title>
      <link>https://blog.er1c.dev/post/redis/how_redis_work_set/</link>
      <pubDate>Thu, 26 Nov 2020 01:34:30 +0800</pubDate>
      
      <guid>https://blog.er1c.dev/post/redis/how_redis_work_set/</guid>
      <description>&lt;p&gt;redis集合相关指令的具体实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>redis中pqsort的简单分析</title>
      <link>https://blog.er1c.dev/post/redis/redis_pqsort/</link>
      <pubDate>Tue, 24 Nov 2020 14:34:03 +0800</pubDate>
      
      <guid>https://blog.er1c.dev/post/redis/redis_pqsort/</guid>
      <description>pqsort提供从指定位置开始，排序指定长度的元素的功能。 主要使用在SORT指令上。 其基础思想是快排的分组。 主要的优化思想有如下几个： 在数量</description>
    </item>
    
    <item>
      <title>列表相关的实现</title>
      <link>https://blog.er1c.dev/post/redis/how_redis_work_list/</link>
      <pubDate>Sun, 22 Nov 2020 23:26:48 +0800</pubDate>
      
      <guid>https://blog.er1c.dev/post/redis/how_redis_work_list/</guid>
      <description>&lt;p&gt;redis列表相关指令的具体实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>位图的基本实现</title>
      <link>https://blog.er1c.dev/post/redis/how_redis_work_bitmap/</link>
      <pubDate>Sun, 22 Nov 2020 00:27:36 +0800</pubDate>
      
      <guid>https://blog.er1c.dev/post/redis/how_redis_work_bitmap/</guid>
      <description>&lt;p&gt;redis位图相关指令的具体实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>redis指令的实现-基础接口</title>
      <link>https://blog.er1c.dev/post/redis/how_redis_work_common/</link>
      <pubDate>Wed, 11 Nov 2020 20:21:00 +0800</pubDate>
      
      <guid>https://blog.er1c.dev/post/redis/how_redis_work_common/</guid>
      <description>&lt;p&gt;这里主要用来放置数据库接口等基础接口的简单分析。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>redis指令的实现-字符串</title>
      <link>https://blog.er1c.dev/post/redis/how_redis_work_string/</link>
      <pubDate>Wed, 11 Nov 2020 16:59:20 +0800</pubDate>
      
      <guid>https://blog.er1c.dev/post/redis/how_redis_work_string/</guid>
      <description>&lt;p&gt;redis字符串相关指令的具体实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>redis的存储模型</title>
      <link>https://blog.er1c.dev/post/redis/data_struct/</link>
      <pubDate>Sun, 08 Nov 2020 00:14:02 +0800</pubDate>
      
      <guid>https://blog.er1c.dev/post/redis/data_struct/</guid>
      <description>redis 6.0 redis在底层实现了若干数据结构： 简单动态字符串 双端链表 快速列表 哈希表 跳表 整数集合 压缩表 etc 但并不是直接使用这些数据结构构建系统，而是将</description>
    </item>
    
    <item>
      <title>redis处理请求的流程</title>
      <link>https://blog.er1c.dev/post/redis/main_process/</link>
      <pubDate>Tue, 03 Nov 2020 03:59:02 +0800</pubDate>
      
      <guid>https://blog.er1c.dev/post/redis/main_process/</guid>
      <description>基于redis 4.0版本 出于学习的目的，简单记录下redis处理连接与请求的流程。 最后，简单介绍了6.0版本引入的多线程IO的实现方式。 接受</description>
    </item>
    
    <item>
      <title>redis的事件循环简单分析</title>
      <link>https://blog.er1c.dev/post/redis/eventloop/</link>
      <pubDate>Sun, 01 Nov 2020 19:30:35 +0800</pubDate>
      
      <guid>https://blog.er1c.dev/post/redis/eventloop/</guid>
      <description>基于redis 4.0版本 redis使用了一个称为ae的事件框架来处理所有的事件，包含时间事件和文件事件。 出于学习的目的，记录下阅读源码的过程</description>
    </item>
    
    <item>
      <title>进程与调度</title>
      <link>https://blog.er1c.dev/post/linux/process/</link>
      <pubDate>Thu, 15 Oct 2020 20:23:23 +0800</pubDate>
      
      <guid>https://blog.er1c.dev/post/linux/process/</guid>
      <description>进程是什么 是运行的二进制程序与其所拥有的资源集合。 是调度的被操作者。 task_struct 进程控制块，存储了进程的相关信息： task_struct definition 进程自己的信息 命名空间 内存 文件 信</description>
    </item>
    
    <item>
      <title>内存管理</title>
      <link>https://blog.er1c.dev/post/linux/memory/</link>
      <pubDate>Wed, 02 Sep 2020 02:27:00 +0800</pubDate>
      
      <guid>https://blog.er1c.dev/post/linux/memory/</guid>
      <description>分段与分页基础 @startuml start :逻辑地址; note right 在程序中使用的 由一个段和偏移量组成 end note partition 分段机制 { :查询默认的或指定的段寄存器中的段选择子; :根据选择子到</description>
    </item>
    
    <item>
      <title>中断与异常</title>
      <link>https://blog.er1c.dev/post/linux/interrupt-and-exception/</link>
      <pubDate>Sat, 29 Aug 2020 10:44:52 +0800</pubDate>
      
      <guid>https://blog.er1c.dev/post/linux/interrupt-and-exception/</guid>
      <description>中断与异常的关系 刚开始看中断、异常相关的资料的时候，一直没有搞清楚两者的区别，导致一直是云里雾里、一头雾水，感觉资料怎么都是互相矛盾的啊。 其</description>
    </item>
    
    <item>
      <title>HTTP的安全机制</title>
      <link>https://blog.er1c.dev/post/http/what-is-http-security/</link>
      <pubDate>Fri, 21 Aug 2020 23:17:27 +0800</pubDate>
      
      <guid>https://blog.er1c.dev/post/http/what-is-http-security/</guid>
      <description>最近在遇到了一个跨域问题，所以看了一些HTTP安全相关的资料。 对HTTP又有了一些新的理解 并深深的自我怀疑我真的了解HTTP吗？ 。 HTTP的</description>
    </item>
    
  </channel>
</rss>
